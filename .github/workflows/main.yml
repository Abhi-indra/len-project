name: CI/CD Deploy via Bastion (Raw SSH + Debug)

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: lens

    steps:
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ BUILD & PUSH â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Export short SHA
      id: vars
      run: echo "tag=${GITHUB_SHA::8}" >>"$GITHUB_OUTPUT"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:      ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:             ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        docker build \
          -t ${{ secrets.ECR_REPO }}:${{ steps.vars.outputs.tag }} \
          -t ${{ secrets.ECR_REPO }}:latest \
          -f application/Dockerfile application

    - name: Push Docker image
      run: |
        docker push ${{ secrets.ECR_REPO }}:${{ steps.vars.outputs.tag }}
        docker push ${{ secrets.ECR_REPO }}:latest

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ DEPLOY â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Deploy to Private EC2 via Bastion
      uses: appleboy/ssh-action@v1.0.0
      env:                       # exported for the bash script
        AWS_REGION: ${{ secrets.AWS_REGION }}
        ECR_REPO:   ${{ secrets.ECR_REPO }}
        BACKEND_IP: ${{ secrets.EC2_BACKEND }}
        USERNAME:   ${{ secrets.EC2_USER }}
        TAG:        ${{ steps.vars.outputs.tag }}
      with:
        host:     ${{ secrets.EC2_BASTION }}   # Bastion public IP or DNS
        username: ${{ secrets.EC2_USER }}
        key:      ${{ secrets.EC2_SSH_KEY }}
        timeout:  "120s"            # <-- moved here (valid input)
        command_timeout: "1800s"    # optional; 30-min max runtime
        script: |
          set -euo pipefail
          KEY=~/.ssh/lens.pem

          # 1) Ensure the key exists once
          if [ ! -s "$KEY" ]; then
            echo "ðŸŸ¡ First run: writing $KEY"
            printf '%s\n' "${{ secrets.EC2_SSH_KEY }}" >"$KEY"
            chmod 400 "$KEY"
          else
            echo "ðŸŸ¡ $KEY already exists â€“ skipping"
          fi

          # 2) Sanity check connectivity
          ip route
          ping -c3 "$BACKEND_IP" || true

          # 3) Hop to backend and deploy
          ssh -o StrictHostKeyChecking=no -i "$KEY" "$USERNAME@$BACKEND_IP" bash -s -- <<EOF
            set -euo pipefail
            echo "ðŸŸ¢ On \$(hostname) as \$(whoami)"

            # Login to ECR
            aws ecr get-login-password --region "${AWS_REGION}" \
              | docker login --username AWS --password-stdin "${ECR_REPO}"

            # Pull image (exact tag -> fallback :latest)
            docker pull "${ECR_REPO}:${TAG}" || docker pull "${ECR_REPO}:latest"

            # Replace container
            docker stop app 2>/dev/null || true
            docker rm   app 2>/dev/null || true
            docker run -d --restart=always \
              --name app -p 5000:5000 "${ECR_REPO}:${TAG}"
          EOF
