name: CI/CD Deploy via Bastion Jump SSH

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: lens

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.ECR_REPO }}:latest -f application/Dockerfile application

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.ECR_REPO }}:latest

    - name: SSH into Bastion and Deploy on Backend EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_BASTION }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "SSHing from Bastion to Backend EC2..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/lens.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_BACKEND }} << 'INNER_SSH'
            echo "Login to ECR from private EC2..."
            docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ secrets.ECR_REPO }}

            echo "Pull latest Docker image..."
            docker pull ${{ secrets.ECR_REPO }}:latest

            echo "Stop existing container..."
            docker stop app || true
            docker rm app || true

            echo "Run container on port 5000..."
            docker run -d --name app -p 5000:5000 ${{ secrets.ECR_REPO }}:latest
          INNER_SSH
