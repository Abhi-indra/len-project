name: CI/CD Deploy via Bastion (Raw SSH + Debug)

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: lens

    steps:
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ BUILD â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:      ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:             ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build & tag Docker image
      run: |
        TAG=$(git rev-parse --short=8 HEAD)
        docker build \
          -t ${{ secrets.ECR_REPO }}:$TAG \
          -t ${{ secrets.ECR_REPO }}:latest \
          -f application/Dockerfile application

    - name: Push Docker image to ECR
      run: |
        TAG=$(git rev-parse --short=8 HEAD)
        docker push ${{ secrets.ECR_REPO }}:$TAG
        docker push ${{ secrets.ECR_REPO }}:latest

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ DEPLOY â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Deploy to Private EC2 via Bastion
      uses: appleboy/ssh-action@v1.0.0
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        ECR_REPO:  ${{ secrets.ECR_REPO }}
        BACKEND:   ${{ secrets.EC2_BACKEND }}
        USER:      ${{ secrets.EC2_USER }}
      with:
        host:     ${{ secrets.EC2_BASTION }}
        username: ${{ secrets.EC2_USER }}
        key:      ${{ secrets.EC2_SSH_KEY }}
        script: |
          set -euo pipefail
          KEY=~/.ssh/lens.pem

          # â”€â”€ 1. Ensure key exists once â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
          if [ ! -s "$KEY" ]; then
            echo "ðŸŸ¡ First run: writing $KEY"
            printf '%s\n' "${{ secrets.EC2_SSH_KEY }}" > "$KEY"
            chmod 400 "$KEY"
          else
            echo "ðŸŸ¡ $KEY already exists â€“ skipping"
          fi

          # â”€â”€ 2. Quick network sanity check â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
          ip route
          ping -c3 "$BACKEND" || true

          # â”€â”€ 3. Hop to backend host and deploy â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
          ssh -o StrictHostKeyChecking=no -i "$KEY" "$USER@$BACKEND" bash -s -- <<'EOF'
            set -euo pipefail
            echo "ðŸŸ¢ On $(hostname) as $(whoami)"

            # Login to ECR
            aws ecr get-login-password --region "$AWS_REGION" \
              | docker login --username AWS --password-stdin "$ECR_REPO"

            # Pull image tagged with current commit, fallback to latest
            TAG=$(git rev-parse --short=8 HEAD || echo latest)
            docker pull "$ECR_REPO:$TAG" || docker pull "$ECR_REPO:latest"

            # Stop & remove any existing container
            docker stop app 2>/dev/null || true
            docker rm   app 2>/dev/null || true

            # Run the new container
            docker run -d --restart=always --name app -p 5000:5000 "$ECR_REPO:$TAG"
          EOF
