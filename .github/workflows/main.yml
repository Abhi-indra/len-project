name: CI/CD Deploy via Bastion (Raw SSH + Debug)

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: lens

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.ECR_REPO }}:latest -f application/Dockerfile application

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.ECR_REPO }}:latest

    - name: Deploy to Private EC2 via Bastion (Raw SSH + Debug)
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_BASTION }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🟡 Creating SSH key file on Bastion..."
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/lens.pem
          chmod 400 ~/.ssh/lens.pem

          echo "🟡 Checking network from Bastion to Backend..."
          ip route
          ping -c 3 ${{ secrets.EC2_BACKEND }}

          echo "🟡 Trying raw SSH to Backend with -vvv debug logs..."
          ssh -vvv -o StrictHostKeyChecking=no -i ~/.ssh/lens.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_BACKEND }} << 'INNER_SSH'
            echo "🟢 Connected to Backend EC2"
            hostname
            whoami
            echo "💻 Logging in to ECR..."
            docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ secrets.ECR_REPO }}

            echo "📦 Pulling Docker image..."
            docker pull ${{ secrets.ECR_REPO }}:latest

            echo "🛑 Stopping old container (if any)..."
            docker stop app || true
            docker rm app || true

            echo "🚀 Running new container on port 5000..."
            docker run -d --name app -p 5000:5000 ${{ secrets.ECR_REPO }}:latest
          INNER_SSH
