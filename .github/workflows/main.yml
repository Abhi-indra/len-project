name: CI/CD Deploy via Bastion (Raw SSH + Debug)

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: lens

    steps:
    # ────────── BUILD & PUSH ──────────
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Export short SHA
      id: vars
      run: echo "TAG=${GITHUB_SHA::8}" >> "$GITHUB_OUTPUT"

    - uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:      ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:             ${{ secrets.AWS_REGION }}

    - uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push image
      run: |
        REPO=${{ secrets.ECR_REPO }}
        TAG=${{ steps.vars.outputs.TAG }}

        docker build \
          -t "$REPO:$TAG" \
          -t "$REPO:latest" \
          -f application/Dockerfile application

        docker push "$REPO:$TAG"
        docker push "$REPO:latest"

    # ─────────── DEPLOY ───────────
    - name: Deploy via bastion
      uses: appleboy/ssh-action@v1.0.0
      env:                       # available to the script **on the bastion**
        AWS_REGION: ${{ secrets.AWS_REGION }}
        ECR_REPO:   ${{ secrets.ECR_REPO }}
        BACKEND_IP: ${{ secrets.EC2_BACKEND }}
        USERNAME:   ${{ secrets.EC2_USER }}
        TAG:        ${{ steps.vars.outputs.TAG }}
        BASTION_KEY: ${{ secrets.EC2_SSH_KEY }}   # same key, but as env
      with:
        host:     ${{ secrets.EC2_BASTION }}      # bastion public IP/FQDN
        username: ${{ secrets.EC2_USER }}
        key:      ${{ secrets.EC2_SSH_KEY }}
        timeout:  "120s"
        command_timeout: "1800s"
        script: |
          set -euo pipefail

          # ── 0) Fail fast if any vital env is empty ─────────────────
          for var in AWS_REGION ECR_REPO BACKEND_IP USERNAME TAG; do
            if [ -z "${!var:-}" ]; then
              echo "::error::$var is empty – check your secrets."
              exit 1
            fi
          done

          # ── 1) Prepare hop key on bastion only once ───────────────
          KEY=~/.ssh/lens.pem
          if [ ! -s "$KEY" ]; then
            printf '%s\n' "$BASTION_KEY" > "$KEY"
            chmod 400 "$KEY"
          fi

          # ── 2) Optional connectivity smoke-test ───────────────────
          ping -c3 "$BACKEND_IP" || echo "::warning::ping failed"

          # ── 3) Hop bastion ➜ backend and deploy the container ─────
          ssh -o StrictHostKeyChecking=no \
              -i "$KEY" \
              "$USERNAME@$BACKEND_IP" \
              bash -s -- "$AWS_REGION" "$ECR_REPO" "$TAG" <<'REMOTE'
            set -euo pipefail
            AWS_REGION="$1"; ECR_REPO="$2"; TAG="$3"

            aws ecr get-login-password --region "$AWS_REGION" \
              | docker login --username AWS --password-stdin "$ECR_REPO"

            docker pull "$ECR_REPO:$TAG" || docker pull "$ECR_REPO:latest"

            docker stop app 2>/dev/null || true
            docker rm   app 2>/dev/null || true

            docker run -d --restart=always \
              --name app -p 5000:5000 "$ECR_REPO:$TAG"
REMOTE
